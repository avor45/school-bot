import os
import sqlite3
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor

# –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –∏ ID –∞–¥–º–∏–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö Railway
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_IDS = list(map(int, os.getenv("ADMIN_IDS").split(",")))

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("school.db")
cursor = conn.cursor()
cursor.execute("""
CREATE TABLE IF NOT EXISTS students (
    id INTEGER PRIMARY KEY,
    name TEXT,
    points INTEGER DEFAULT 0
)
""")
conn.commit()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton("üìä –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥", callback_data="my_points"),
        InlineKeyboardButton("üèÜ –¢–æ–ø —É—á–µ–Ω–∏–∫–æ–≤", callback_data="top_students")
    )
    return kb

# –°—Ç–∞—Ä—Ç
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    cursor.execute("SELECT * FROM students WHERE id=?", (message.from_user.id,))
    if cursor.fetchone() is None:
        cursor.execute("INSERT INTO students (id, name) VALUES (?, ?)",
                       (message.from_user.id, message.from_user.full_name))
        conn.commit()
        await message.answer("‚úÖ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ —Ä–µ–π—Ç–∏–Ω–≥–∞!", reply_markup=main_menu())
    else:
        await message.answer("üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º!", reply_markup=main_menu())

# –ú–æ–π —Ä–µ–π—Ç–∏–Ω–≥
@dp.callback_query_handler(lambda c: c.data == "my_points")
async def my_points(callback: types.CallbackQuery):
    cursor.execute("SELECT points FROM students WHERE id=?", (callback.from_user.id,))
    points = cursor.fetchone()[0]
    await callback.message.answer(f"üìä –£ —Ç–µ–±—è {points} –±–∞–ª–ª–æ–≤.")

# –¢–æ–ø —É—á–µ–Ω–∏–∫–æ–≤
@dp.callback_query_handler(lambda c: c.data == "top_students")
async def top_students(callback: types.CallbackQuery):
    cursor.execute("SELECT name, points FROM students ORDER BY points DESC LIMIT 5")
    top = cursor.fetchall()
    text = "üèÜ –¢–æ–ø —É—á–µ–Ω–∏–∫–æ–≤:\n"
    for i, (name, points) in enumerate(top, start=1):
        text += f"{i}. {name} ‚Äî {points} –±–∞–ª–ª–æ–≤\n"
    await callback.message.answer(text)

# –î–æ–±–∞–≤–∏—Ç—å –±–∞–ª–ª—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
@dp.message_handler(commands=['add'])
async def add_points(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
    try:
        _, student_id, pts = message.text.split()
        pts = int(pts)
        cursor.execute("UPDATE students SET points = points + ? WHERE id=?", (pts, student_id))
        conn.commit()
        await message.reply("‚úÖ –ë–∞–ª–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã!")
    except:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /add <id> <–±–∞–ª–ª—ã>")

# –£–±—Ä–∞—Ç—å –±–∞–ª–ª—ã
@dp.message_handler(commands=['remove'])
async def remove_points(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return await message.reply("‚ùå –ù–µ—Ç –ø—Ä–∞–≤.")
    try:
        _, student_id, pts = message.text.split()
        pts = int(pts)
        cursor.execute("UPDATE students SET points = points - ? WHERE id=?", (pts, student_id))
        conn.commit()
        await message.reply("‚úÖ –ë–∞–ª–ª—ã —É–±—Ä–∞–Ω—ã!")
    except:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: /remove <id> <–±–∞–ª–ª—ã>")

if __name__ == "__main__":
    executor.start_polling(dp)
